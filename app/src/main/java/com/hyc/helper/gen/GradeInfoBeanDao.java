package com.hyc.helper.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hyc.helper.bean.GradeInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GRADE_INFO_BEAN".
*/
public class GradeInfoBeanDao extends AbstractDao<GradeInfoBean, Void> {

    public static final String TABLENAME = "GRADE_INFO_BEAN";

    /**
     * Properties of entity GradeInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Xh = new Property(0, String.class, "xh", false, "XH");
        public final static Property Xn = new Property(1, String.class, "xn", false, "XN");
        public final static Property Xq = new Property(2, String.class, "xq", false, "XQ");
        public final static Property Kcmc = new Property(3, String.class, "kcmc", false, "KCMC");
        public final static Property Xf = new Property(4, String.class, "xf", false, "XF");
        public final static Property Cj = new Property(5, String.class, "cj", false, "CJ");
        public final static Property Zscj = new Property(6, String.class, "zscj", false, "ZSCJ");
        public final static Property Bkcj = new Property(7, String.class, "bkcj", false, "BKCJ");
        public final static Property Jd = new Property(8, String.class, "jd", false, "JD");
        public final static Property Cxbj = new Property(9, String.class, "cxbj", false, "CXBJ");
        public final static Property Kcxz = new Property(10, String.class, "kcxz", false, "KCXZ");
        public final static Property Bj = new Property(11, String.class, "bj", false, "BJ");
    }


    public GradeInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GradeInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GRADE_INFO_BEAN\" (" + //
                "\"XH\" TEXT," + // 0: xh
                "\"XN\" TEXT," + // 1: xn
                "\"XQ\" TEXT," + // 2: xq
                "\"KCMC\" TEXT," + // 3: kcmc
                "\"XF\" TEXT," + // 4: xf
                "\"CJ\" TEXT," + // 5: cj
                "\"ZSCJ\" TEXT," + // 6: zscj
                "\"BKCJ\" TEXT," + // 7: bkcj
                "\"JD\" TEXT," + // 8: jd
                "\"CXBJ\" TEXT," + // 9: cxbj
                "\"KCXZ\" TEXT," + // 10: kcxz
                "\"BJ\" TEXT);"); // 11: bj
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GRADE_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GradeInfoBean entity) {
        stmt.clearBindings();
 
        String xh = entity.getXh();
        if (xh != null) {
            stmt.bindString(1, xh);
        }
 
        String xn = entity.getXn();
        if (xn != null) {
            stmt.bindString(2, xn);
        }
 
        String xq = entity.getXq();
        if (xq != null) {
            stmt.bindString(3, xq);
        }
 
        String kcmc = entity.getKcmc();
        if (kcmc != null) {
            stmt.bindString(4, kcmc);
        }
 
        String xf = entity.getXf();
        if (xf != null) {
            stmt.bindString(5, xf);
        }
 
        String cj = entity.getCj();
        if (cj != null) {
            stmt.bindString(6, cj);
        }
 
        String zscj = entity.getZscj();
        if (zscj != null) {
            stmt.bindString(7, zscj);
        }
 
        String bkcj = entity.getBkcj();
        if (bkcj != null) {
            stmt.bindString(8, bkcj);
        }
 
        String jd = entity.getJd();
        if (jd != null) {
            stmt.bindString(9, jd);
        }
 
        String cxbj = entity.getCxbj();
        if (cxbj != null) {
            stmt.bindString(10, cxbj);
        }
 
        String kcxz = entity.getKcxz();
        if (kcxz != null) {
            stmt.bindString(11, kcxz);
        }
 
        String bj = entity.getBj();
        if (bj != null) {
            stmt.bindString(12, bj);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GradeInfoBean entity) {
        stmt.clearBindings();
 
        String xh = entity.getXh();
        if (xh != null) {
            stmt.bindString(1, xh);
        }
 
        String xn = entity.getXn();
        if (xn != null) {
            stmt.bindString(2, xn);
        }
 
        String xq = entity.getXq();
        if (xq != null) {
            stmt.bindString(3, xq);
        }
 
        String kcmc = entity.getKcmc();
        if (kcmc != null) {
            stmt.bindString(4, kcmc);
        }
 
        String xf = entity.getXf();
        if (xf != null) {
            stmt.bindString(5, xf);
        }
 
        String cj = entity.getCj();
        if (cj != null) {
            stmt.bindString(6, cj);
        }
 
        String zscj = entity.getZscj();
        if (zscj != null) {
            stmt.bindString(7, zscj);
        }
 
        String bkcj = entity.getBkcj();
        if (bkcj != null) {
            stmt.bindString(8, bkcj);
        }
 
        String jd = entity.getJd();
        if (jd != null) {
            stmt.bindString(9, jd);
        }
 
        String cxbj = entity.getCxbj();
        if (cxbj != null) {
            stmt.bindString(10, cxbj);
        }
 
        String kcxz = entity.getKcxz();
        if (kcxz != null) {
            stmt.bindString(11, kcxz);
        }
 
        String bj = entity.getBj();
        if (bj != null) {
            stmt.bindString(12, bj);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public GradeInfoBean readEntity(Cursor cursor, int offset) {
        GradeInfoBean entity = new GradeInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // xh
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // xn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // xq
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // kcmc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // xf
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cj
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // zscj
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // bkcj
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // jd
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // cxbj
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // kcxz
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // bj
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GradeInfoBean entity, int offset) {
        entity.setXh(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setXn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setXq(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setKcmc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setXf(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCj(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setZscj(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBkcj(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setJd(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCxbj(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setKcxz(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBj(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(GradeInfoBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(GradeInfoBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(GradeInfoBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
