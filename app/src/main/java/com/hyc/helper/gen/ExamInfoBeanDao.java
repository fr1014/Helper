package com.hyc.helper.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hyc.helper.bean.ExamInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXAM_INFO_BEAN".
*/
public class ExamInfoBeanDao extends AbstractDao<ExamInfoBean, Void> {

    public static final String TABLENAME = "EXAM_INFO_BEAN";

    /**
     * Properties of entity ExamInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property KKDepNo = new Property(0, String.class, "KKDepNo", false, "KKDEP_NO");
        public final static Property CourseName = new Property(1, String.class, "CourseName", false, "COURSE_NAME");
        public final static Property Starttime = new Property(2, String.class, "Starttime", false, "STARTTIME");
        public final static Property EndTime = new Property(3, String.class, "EndTime", false, "END_TIME");
        public final static Property Week_Num = new Property(4, String.class, "Week_Num", false, "WEEK__NUM");
        public final static Property Isset = new Property(5, String.class, "isset", false, "ISSET");
        public final static Property RoomName = new Property(6, String.class, "RoomName", false, "ROOM_NAME");
    }


    public ExamInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ExamInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXAM_INFO_BEAN\" (" + //
                "\"KKDEP_NO\" TEXT," + // 0: KKDepNo
                "\"COURSE_NAME\" TEXT," + // 1: CourseName
                "\"STARTTIME\" TEXT," + // 2: Starttime
                "\"END_TIME\" TEXT," + // 3: EndTime
                "\"WEEK__NUM\" TEXT," + // 4: Week_Num
                "\"ISSET\" TEXT," + // 5: isset
                "\"ROOM_NAME\" TEXT);"); // 6: RoomName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXAM_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ExamInfoBean entity) {
        stmt.clearBindings();
 
        String KKDepNo = entity.getKKDepNo();
        if (KKDepNo != null) {
            stmt.bindString(1, KKDepNo);
        }
 
        String CourseName = entity.getCourseName();
        if (CourseName != null) {
            stmt.bindString(2, CourseName);
        }
 
        String Starttime = entity.getStarttime();
        if (Starttime != null) {
            stmt.bindString(3, Starttime);
        }
 
        String EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindString(4, EndTime);
        }
 
        String Week_Num = entity.getWeek_Num();
        if (Week_Num != null) {
            stmt.bindString(5, Week_Num);
        }
 
        String isset = entity.getIsset();
        if (isset != null) {
            stmt.bindString(6, isset);
        }
 
        String RoomName = entity.getRoomName();
        if (RoomName != null) {
            stmt.bindString(7, RoomName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ExamInfoBean entity) {
        stmt.clearBindings();
 
        String KKDepNo = entity.getKKDepNo();
        if (KKDepNo != null) {
            stmt.bindString(1, KKDepNo);
        }
 
        String CourseName = entity.getCourseName();
        if (CourseName != null) {
            stmt.bindString(2, CourseName);
        }
 
        String Starttime = entity.getStarttime();
        if (Starttime != null) {
            stmt.bindString(3, Starttime);
        }
 
        String EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindString(4, EndTime);
        }
 
        String Week_Num = entity.getWeek_Num();
        if (Week_Num != null) {
            stmt.bindString(5, Week_Num);
        }
 
        String isset = entity.getIsset();
        if (isset != null) {
            stmt.bindString(6, isset);
        }
 
        String RoomName = entity.getRoomName();
        if (RoomName != null) {
            stmt.bindString(7, RoomName);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ExamInfoBean readEntity(Cursor cursor, int offset) {
        ExamInfoBean entity = new ExamInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // KKDepNo
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CourseName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Starttime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // EndTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Week_Num
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // isset
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // RoomName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ExamInfoBean entity, int offset) {
        entity.setKKDepNo(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCourseName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStarttime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEndTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWeek_Num(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsset(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRoomName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ExamInfoBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ExamInfoBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(ExamInfoBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
